name: Build and Deploy Docker Image

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repo name
        id: set-repo-name
        run: echo "repo_name=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ steps.set-repo-name.outputs.repo_name }}:latest

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Deploy to Proxmox
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            # Install jq (for parsing API responses)
            sudo apt update
            sudo apt install jq -y

            # Get API Token Secret
            TOKEN_SECRET=$(pvesh get /access/token --output-format json | jq -r '.data[] | select(.userid == "${{ secrets.API_TOKEN_ID }}") | .tokenid')

            # Create a new container from the template
            qm create ${{ secrets.VM_ID }} --clone ${{ secrets.TEMPLATE_ID }} --name badgey --net0 virtio,bridge=vmbr1,ip=10.10.10.20/24

            # Add a description to the container
            qm set ${{ secrets.VM_ID }} --description "Updated by GitHub Actions: \$(date)"

            # Bind mount the database file into the container
            qm set ${{ secrets.VM_ID }} --hostpci0 /opt/badgey/data/db.sqlite,/usr/src/app/db/db.sqlite

            # Set environment variables for the container
            qm set ${{ secrets.VM_ID }} --env GEMINI_API=${{ env.GEMINI_API }} --env TOKEN=${{ env.TOKEN }}

            # Start the container
            qm start ${{ secrets.VM_ID }}

            # Wait for container to boot
            sleep 30

            # Execute commands inside the container using the Proxmox API
            # Pull the Docker image
            curl -s -k -X POST \
              -H "Authorization: PVEAPIToken=${{ secrets.API_TOKEN_ID }}=${TOKEN_SECRET}" \
              https://${{ secrets.SSH_HOST }}:8006/api2/json/nodes/razor/lxc/${{ secrets.VM_ID }}/execute \
              -d command="docker" \
              -d command="pull" \
              -d command="ghcr.io/${{ steps.set-repo-name.outputs.repo_name }}:latest"

            # Stop the running Docker container (if any)
            curl -s -k -X POST \
              -H "Authorization: PVEAPIToken=${{ secrets.API_TOKEN_ID }}=${TOKEN_SECRET}" \
              https://${{ secrets.SSH_HOST }}:8006/api2/json/nodes/razor/lxc/${{ secrets.VM_ID }}/execute \
              -d command="docker" \
              -d command="stop" \
              -d command="badgey-app"

            # Remove the stopped Docker container (if any)
            curl -s -k -X POST \
              -H "Authorization: PVEAPIToken=${{ secrets.API_TOKEN_ID }}=${TOKEN_SECRET}" \
              https://${{ secrets.SSH_HOST }}:8006/api2/json/nodes/razor/lxc/${{ secrets.VM_ID }}/execute \
              -d command="docker" \
              -d command="rm" \
              -d command="badgey-app"

            # Run the new Docker container
            curl -s -k -X POST \
              -H "Authorization: PVEAPIToken=${{ secrets.API_TOKEN_ID }}=${TOKEN_SECRET}" \
              https://${{ secrets.SSH_HOST }}:8006/api2/json/nodes/razor/lxc/${{ secrets.VM_ID }}/execute \
              -d command="docker" \
              -d command="run" \
              -d command="-d" \
              -d command="--restart=always" \
              -d command="--name" \
              -d command="badgey-app" \
              -d command="-v" \
              -d command="/usr/src/app/db/db.sqlite:/usr/src/app/db/db.sqlite" \
              -d command="-e" \
              -d command="GEMINI_API=${{ env.GEMINI_API }}" \
              -d command="-e" \
              -d command="TOKEN=${{ env.TOKEN }}" \
              -d command="ghcr.io/${{ steps.set-repo-name.outputs.repo_name }}:latest"

          EOF
        env:
          GEMINI_API: ${{ secrets.GEMINI_API }}
          TOKEN: ${{ secrets.TOKEN }}