name: Build and Deploy Docker Image

on:
  push:
    branches:
      - master

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Login to Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set lowercase repo name
        run: echo "LOWERCASE_REPO_NAME=$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]')" >> $GITHUB_ENV

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: ghcr.io/${{ github.repository_owner }}/${{ env.LOWERCASE_REPO_NAME }}:latest

      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Deploy to Proxmox
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            # Install jq (for parsing API responses)
            sudo apt update
            sudo apt install jq -y

            # Get API Token
            TOKEN=$(pvesh get /access/token --output-format json | jq -r '.data[] | select(.userid == "${{ secrets.API_TOKEN_ID }}") | .tokenid')

            # Stop and destroy any existing container
            qm stop 420 || true
            qm destroy 420 || true

            # Create a new container from template
            qm create 420 --clone ${{ secrets.TEMPLATE_ID }} --name badgey --net0 virtio,bridge=vmbr1,ip=10.10.10.20/24
            qm set 420 --description "Updated by GitHub Actions: \$(date)"

            # Bind mount the database file to the correct location in the container
            qm set 420 --hostpci0 /opt/badgey/data/db.sqlite,/usr/src/app/db/db.sqlite

            # Set environment variables
            qm set 420 --env GEMINI_API=${GEMINI_API},TOKEN=${TOKEN}

            # Start the container
            qm start 420

            # Wait for the container to be ready
            sleep 30

            # Pull the latest image and run it in the container
            curl -k -s -X POST \
            https://${{ secrets.SSH_HOST }}:8006/api2/json/nodes/razor/lxc/420/execute \
            -H "Authorization: PVEAPIToken=${{ secrets.API_TOKEN_ID }}=${TOKEN}" \
            -d command="docker" \
            -d command="pull" \
            -d command="ghcr.io/${{ github.repository_owner }}/${{ env.LOWERCASE_REPO_NAME }}:latest"

            qm exec 420 docker run -d --restart=always --name badgey-app ghcr.io/${{ github.repository_owner }}/${{ env.LOWERCASE_REPO_NAME }}:latest

          EOF
        env:
          GEMINI_API: ${{ secrets.GEMINI_API }}
          TOKEN: ${{ secrets.TOKEN }}
          LOWERCASE_REPO_NAME: ${{ env.LOWERCASE_REPO_NAME }}