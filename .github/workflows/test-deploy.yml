name: Deploy to Proxmox

on:
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Install SSH Key
        uses: shimataro/ssh-key-action@v2
        with:
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          known_hosts: ${{ secrets.SSH_KNOWN_HOSTS }}

      - name: Deploy to Proxmox
        run: |
          ssh -o StrictHostKeyChecking=no ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }} << 'EOF'
            # Install jq (for parsing API responses) if not already installed
            command -v jq >/dev/null 2>&1 || { sudo apt-get update && sudo apt-get install -y jq; }

            # Ensure that pve-qemu-kvm is installed
            sudo apt-get install -y pve-qemu-kvm

            # Stop and destroy any existing container
            sudo qm stop ${{ secrets.VM_ID }} || true
            sudo qm destroy ${{ secrets.VM_ID }} || true

            # Clone the template to create a new container
            sudo qm clone ${{ secrets.TEMPLATE_ID }} ${{ secrets.VM_ID }} --name badgey

            # Configure the network for the new container
            sudo qm set ${{ secrets.VM_ID }} --net0 virtio,bridge=vmbr1,ip=10.10.10.20/24

            # Update the container's description
            sudo qm set ${{ secrets.VM_ID }} --description "Updated by GitHub Actions: \$(date)"

            # Bind mount the database file into the container
            sudo qm set ${{ secrets.VM_ID }} --hostpci0 /opt/badgey/data/db.sqlite,bind=/usr/src/app/db/db.sqlite

            # Start the container
            sudo qm start ${{ secrets.VM_ID }}

            # Wait for the container to be ready
            sleep 30

            # Pull the latest image into the container
            sudo qm exec ${{ secrets.VM_ID }} docker pull ghcr.io/${{ github.repository_owner }}/${{ env.LOWERCASE_REPO_NAME }}:latest

            # Stop and remove any existing Docker container in the Proxmox container
            sudo qm exec ${{ secrets.VM_ID }} docker stop badgey-app || true
            sudo qm exec ${{ secrets.VM_ID }} docker rm badgey-app || true

            # Run the new Docker container in the Proxmox container, passing environment variables
            sudo qm exec ${{ secrets.VM_ID }} docker run -d --restart=always --name badgey-app -e GEMINI_API=${GEMINI_API} -e TOKEN=${TOKEN} ghcr.io/${{ github.repository_owner }}/${{ env.LOWERCASE_REPO_NAME }}:latest

          EOF
        env:
          GEMINI_API: ${{ secrets.GEMINI_API }}
          TOKEN: ${{ secrets.TOKEN }}
          LOWERCASE_REPO_NAME: ${{ env.LOWERCASE_REPO_NAME }}
